{"version":3,"sources":["components/common/preloader/spinner.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Posts.module.css","store/reducers/dialogs/dialogsReducer.ts","api/instance-api.ts","components/Setting/Setting.module.css","components/Users/UserItem/Users.module.css","serviceWorker.js","store/reducers/app/appReducer.ts","store/reducers/profile/profileReducer.ts","store/reducers/sidebar/sidebarReducer.ts","utils/helpers/object-helpers.ts","store/reducers/users/usersReducer.ts","store/store.ts","components/Users/UserItem/UserItem.tsx","assets/icons/35.svg","components/common/preloader/spinner.tsx","components/Users/UsersLayout/UserSearch.tsx","components/Users/UsersLayout/Users.tsx","api/user-api.ts","store/thunk/users/usersThunk.ts","store/selectors/users/usersSelectors.ts","components/Users/UsersContainer.tsx","assets/icons/294.svg","components/common/preloader/loading.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileJob/ProfileJobData.tsx","components/Profile/ProfileInfo/PtofileInfo.tsx","components/Profile/Posts/PostsForm/PostForm.tsx","components/Profile/Posts/PostsItem/Post.tsx","components/Profile/Posts/PostsLayout/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/ProfileLayout/Ptofile.tsx","api/profile-api.ts","store/thunk/profile/profileThunk.ts","store/selectors/profile/profileSelectors.ts","components/Profile/PtofileContainer.tsx","components/Setting/ProfileEdit/InfoBlockForm.tsx","components/Setting/Setting.tsx","assets/logo/logo.svg","components/Header/HeaderLayout/Header.tsx","components/Header/HeaderContainer.tsx","components/Sidebar/SidebarItem/sidebarFriends.tsx","components/Sidebar/SidebarLayout/Sidebar.tsx","components/Sidebar/SidebarContainer.tsx","components/NavBar/NavBar.tsx","components/Start Component/StartPage.tsx","utils/hoc/lazyComponent.tsx","App.tsx","store/thunk/app/initThunk.ts","index.js","components/common/input/input.tsx","utils/validators/validator.ts","components/Profile/Posts/PostsItem/Post.module.css","components/NavBar/NavBar.module.css","components/Users/Users.module.css","components/Header/Header.module.css","store/reducers/auth/authReducer.ts","components/Start Component/StartPage.module.css","components/common/input/input.module.css","components/common/textarea/textarea.tsx","store/actions/actions.ts","utils/hoc/authRedirect.tsx","api/auth-api.ts","store/thunk/auth/authThunk.ts","components/Profile/Profile.module.css","components/Sidebar/Sidebar.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","dialogActions","sendMessageCreator","value","type","SEND_MESSAGE","payload","dialogsReducer","state","action","newMessage","length","ResultCodesEnum","ResultCodeForCaptchaCEnum","instance","axios","create","baseURL","withCredentials","headers","Boolean","window","location","hostname","match","initialized","appActions","SET_INITIALIZED","appReducer","profile","status","posts","likeCount","isLoading","isFetchingStatus","profileActions","addPostCreator","ADD_POST","deletePostCreator","DELETE_POST","setProfileData","data","SET_PROFILE_DATA","getStatus","GET_STATUS","setPhotoSuccess","photos","SET_PHOTO_SUCCESS","toggleFetch","bool","IS_PROFILE_FETCHING","toggleFetchStatus","IS_STATUS_FETCHING","profileReducer","newPost","filter","p","friendList","sidebarReducer","UpdateObjectInArray","items","itemID","objPropsName","newObjProps","map","user","users","pageSize","totalCount","currentPage","isDisabledBtn","usersActions","userID","FOLLOW","UNFOLLOW","SET_USERS","num","SET_PAGE","SET_TOTAL_COUNT","IS_USER_FETCHING","IS_DISABLED_BTN","userId","usersReducer","followed","RootReducer","combineReducers","app","profilePage","dialogPage","userPage","sidebar","auth","authReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","UsersItem","setUnfollowHandler","setFollowHandler","isDisabled","className","classesItem","userInfoWrapper","to","infoWrapperImg","src","small","alt","unFollowBtn","userSubscribeBtn","onClick","disabled","some","followBtn","userInfoContainer","info","country","city","Preloader","classes","userLoading","spinner","SearchForm","useFormik","initialValues","onSubmit","values","console","log","JSON","stringify","handleSubmit","htmlFor","onChange","handleChange","onBlur","handleBlur","touched","errors","Users","usersPage","selectPage","pagesCount","Math","ceil","userItem","uData","usersContainer","usersHeader","usersField","usersItems","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selected","containerClassName","reactPaginate","activeClassName","reactPaginationBtn","usersAPI","get","then","res","post","delete","_follow_unfollow_flow","dispatch","apiMethod","actionCreator","a","response","resultCode","SUCCESS","getUsersSelector","getPageSizeSelector","getUsersLengthSelector","getCurrantPageSelector","checkLoadingSelector","isUnUseBtnSelector","UsersContainer","props","setFollowThunkCreator","setUnfollowThunkCreator","getPageThunkCreator","this","getUsersThunkCreator","React","Component","connect","Loader","loading","width","ProfileStatus","statusData","saveStatus","isOwner","useState","editMode","setEditMode","setStatus","useEffect","statusBlock","statusDescr","target","autoFocus","placeholder","changeStatusBtn","cancelStatusBtn","bubble2","bubble1","Contact","title","href","rel","ProfileData","contacts","userInfoBlock","aboutMe","aboutMeTitle","linkBlock","Object","keys","key","editInfoBtn","ProfileJob","jobBlock","lookingForAJob","jobDescr","lookingForAJobDescription","openJobStatus","circleIndicatorActive","circleIndicatorNot","ProfileInfo","saveNewPhoto","updateStatus","head","wrapper","mediaBlock","photosBlock","large","infoBlock","nameBlock","changePhotosDis","changePhotos","files","user_nameBlock","fullName","maxLength200","maxLength","minValue1","minValue","PostReduxForm","reduxForm","reset","Field","component","Textarea","validate","required","setTimeout","Post","item","ava_wrapper","ava_item","body_wrapper","post_body_item","like_wrapper","like_item","Posts","memo","postsElement","reverse","pData","postField","createPost","body","postsBlock","PostsContainer","Profile","profileContainer","profileAPI","newStatus","put","file","formData","FormData","append","getProfileThunkCreator","getProfileSelector","getStatusSelector","getUserIdSelector","checkAuthSelector","isAuth","checkFetchingStatusSelector","ProfileContainer","params","authUserID","history","push","getStatusThunkCreator","error","refreshProfile","prevProps","prevState","setStatusThunkCreator","saveNewPhotoThunkCreator","PureComponent","alert","withAuthRedirect","withRouter","maxLength300","maxLength50","maxLength20","ProfileDataReduxForm","submitting","settingsWrapper","form_wrapper","aboutMe_block","InputBase","btn_save","job_block","contacts_block","contacts_fields","btn_saveAll","ProfileDataEdit","saveProfile","settingsFieldDis","settingsField","saveProfileThunkCreator","getState","isNull","Error","stopSubmit","_error","settingContainer","Header","login","signOut","headerWrapper","logo","loginBlock","userName","authBtn","signOutThunkCreator","SidebarFriends","Sidebar","friendItem","container","SidebarContainer","NavBar","nav","StartPage","header","headerGreeting","headerLogin","headerPass","disclaimer","disclaimerTitle","disclaimerDescr","stack","stackList","stackTitile","stackItemTitle","stackItem","opportunities","opportunitiesList","opportunitiesTitle","opportunitiesItemCan","opportunitiesItem","withSuspense","fallback","Login","lazy","SuspenseMessagesPage","News","Music","App","catchAllUnhandledError","InitializeApp","addEventListener","removeEventListener","path","render","Setting","exact","SocialAppContainer","promiseAuth","checkAuthThunkCreator","Promise","all","SocialApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","input","meta","error_msg","LoginInput","error_input","PasswordInput","undefined","max","min","email","captcha","authActions","setAuthData","SET_AUTH_DATA","getCaptcha","url","GET_CAPTCHA","style","color","mapStateToProps","restProps","authAPI","password","rememberMe","signInThunkCreator","ANTI_BOT"],"mappings":"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","file":"static/js/main.53934ee6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userLoading\":\"spinner_userLoading__pYkc6\",\"spinner\":\"spinner_spinner__xCXbS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"ProfileInfo_head__3Q3FT\",\"wrapper\":\"ProfileInfo_wrapper__3boPV\",\"mediaBlock\":\"ProfileInfo_mediaBlock__KKrQe\",\"photosBlock\":\"ProfileInfo_photosBlock__3yjLZ\",\"statusBlock\":\"ProfileInfo_statusBlock__3HLvc\",\"bubble1\":\"ProfileInfo_bubble1__2ZOgi\",\"bubble2\":\"ProfileInfo_bubble2__2ACT-\",\"statusDescr\":\"ProfileInfo_statusDescr__1y0wO\",\"changeStatusBtn\":\"ProfileInfo_changeStatusBtn__2ECzS\",\"cancelStatusBtn\":\"ProfileInfo_cancelStatusBtn__2uT7S\",\"infoBlock\":\"ProfileInfo_infoBlock__Yi3uO\",\"jobBlock\":\"ProfileInfo_jobBlock__3qX4B\",\"openJobStatus\":\"ProfileInfo_openJobStatus__2IBJk\",\"jobDescr\":\"ProfileInfo_jobDescr__2NnqD\",\"circleIndicatorActive\":\"ProfileInfo_circleIndicatorActive__3GUQ7\",\"circleIndicatorNot\":\"ProfileInfo_circleIndicatorNot__3OngS\",\"userInfoBlock\":\"ProfileInfo_userInfoBlock__2F7C3\",\"aboutMe\":\"ProfileInfo_aboutMe__1mww3\",\"aboutMeTitle\":\"ProfileInfo_aboutMeTitle__3NHae\",\"nameBlock\":\"ProfileInfo_nameBlock__3H98C\",\"user_nameBlock\":\"ProfileInfo_user_nameBlock__1Vh9z\",\"changePhotos\":\"ProfileInfo_changePhotos__20Roj\",\"changePhotosDis\":\"ProfileInfo_changePhotosDis__6Hh7r\",\"linkBlock\":\"ProfileInfo_linkBlock__2I8GX\",\"editInfoBtn\":\"ProfileInfo_editInfoBtn__3NaWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postField\":\"Posts_postField__33u5B\",\"postsBlock\":\"Posts_postsBlock__2AH0W\"};","import {SEND_MESSAGE} from \"../../actions/actions\";\nimport {DialogType, MessageType} from \"../../types/@types\";\nimport {InferActionsType} from \"../../store\";\n\nconst initialState = {\n    dialogs: [\n        {id: 1, name: 'Ivan'},\n        {id: 2, name: 'Dmitri'},\n        {id: 3, name: 'Max'},\n        {id: 4, name: 'Vladimir'},\n        {id: 5, name: 'Andrew'},\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'What`s Up'},\n        {id: 3, message: 'How are you'},\n        {id: 4, message: 'Hello'},\n        {id: 5, message: 'Yo'},\n        {id: 6, message: 'Hi'},\n        {id: 7, message: 'What`s Up'},\n        {id: 8, message: 'How are you'},\n        {id: 9, message: 'Hello'},\n        {id: 10, message: 'Yo'},\n    ] as Array<MessageType>,\n};\n\nexport type DialogInitialStateType = typeof initialState;\nexport type DialogActionsTypes = InferActionsType<typeof dialogActions>\n\nconst dialogsReducer = (state = initialState, action: DialogActionsTypes): DialogInitialStateType => {\n    switch (action.type) {\n        case SEND_MESSAGE: {\n            let newMessage = {\n                id: state.messages.length + 1,\n                message: action.payload\n            }\n            return {\n                ...state,\n                messages: [...state.messages, newMessage]\n            };\n        }\n        default:\n            return state;\n    }\n}\nexport const dialogActions = {\n    sendMessageCreator: (value: string) => ({\n        type: SEND_MESSAGE, payload: value\n    } as const),\n}\n\nexport default dialogsReducer\n","import axios from \"axios\";\n\n//Enum Result Codes\nexport enum ResultCodesEnum {\n    SUCCESS = 0,\n    ERROR = 1,\n}\nexport enum ResultCodeForCaptchaCEnum {\n    ANTI_BOT = 10,\n}\n\n/* Мы создаем instance axios.create, чтобы один раз прописать в него параметры и не дублировать их в каждом запросе */\nexport const instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\n    withCredentials: true,\n    headers: {\n        /* мы добавляем в headers api-key, чтобы сервер мог понять кто обращается к серверу. */\n        'API-KEY': 'a2f60dbc-59e4-4c2c-b4c3-fa8b69b0306e'\n    }\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingContainer\":\"Setting_settingContainer__2jnFS\",\"settingsWrapper\":\"Setting_settingsWrapper__rls-w\",\"settingsField\":\"Setting_settingsField__K0dp4\",\"settingsFieldDis\":\"Setting_settingsFieldDis__3xOy1\",\"isLoading\":\"Setting_isLoading__QNUY4\",\"form_wrapper\":\"Setting_form_wrapper__2-bPE\",\"aboutMe_block\":\"Setting_aboutMe_block__2aD8x\",\"btn_save\":\"Setting_btn_save__3-Ai2\",\"job_block\":\"Setting_job_block__5LFgs\",\"contacts_block\":\"Setting_contacts_block__yRxE5\",\"contacts_fields\":\"Setting_contacts_fields__2Fohe\",\"btn_saveAll\":\"Setting_btn_saveAll__2rC3K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userInfoWrapper\":\"Users_userInfoWrapper__3S4n9\",\"userSubscribeBtn\":\"Users_userSubscribeBtn__22gv2\",\"followBtn\":\"Users_followBtn__1J35y\",\"unFollowBtn\":\"Users_unFollowBtn__Oh9oB\",\"userInfoContainer\":\"Users_userInfoContainer__1A0ol\",\"infoWrapperImg\":\"Users_infoWrapperImg__2vdnU\",\"info\":\"Users_info__2Jz7e\",\"location\":\"Users_location__1uMJl\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SET_INITIALIZED} from \"../../actions/actions\";\nimport {InferActionsType} from \"../../store\";\n\nconst initialState = {\n    initialized: false,\n};\n\nexport type InitialAppStateType = typeof initialState\nexport type InitActionsTypes = InferActionsType<typeof appActions>\n\nconst appReducer = (state = initialState, action: InitActionsTypes): InitialAppStateType => {\n    switch (action.type) {\n        case SET_INITIALIZED: {\n            return {\n                ...state,\n                initialized: true\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport const appActions = {\n    InitializeSuccess : () => ({\n        type: SET_INITIALIZED,\n    } as const)\n}\n\nexport default appReducer;\n","import {PhotosType, PostsType, ProfileType} from \"../../types/@types\";\nimport {InferActionsType} from \"../../store\";\nimport {\n    ADD_POST,\n    DELETE_POST,\n    GET_STATUS,\n    IS_PROFILE_FETCHING,\n    IS_STATUS_FETCHING,\n    SET_PHOTO_SUCCESS,\n    SET_PROFILE_DATA\n} from \"../../actions/actions\";\n\nconst initialState = {\n    profile: null as ProfileType | null,\n    status: '',\n    posts: [\n        {id: 1, message: 'Hi, how are you', likeCount: 50},\n        {id: 2, message: 'It`s my first post', likeCount: 40},\n        {id: 3, message: 'Hi, how are you', likeCount: 30},\n        {id: 4, message: 'How are you', likeCount: 20},\n        {id: 5, message: 'Hi', likeCount: 10},\n    ] as Array<PostsType>,\n    isLoading: false,\n    isFetchingStatus: false,\n};\n\nexport type ProfileInitialStateType = typeof initialState\nexport type ProfileActionsTypes = InferActionsType<typeof profileActions>\n\nconst profileReducer = (state = initialState, action: ProfileActionsTypes): ProfileInitialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            let newPost = {\n                id: state.posts.length + 1,\n                message: action.payload,\n                likeCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost]\n            };\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.payload)\n            };\n        case SET_PROFILE_DATA:\n            return {\n                ...state,\n                profile: action.payload\n            };\n        case GET_STATUS:\n            return {\n                ...state,\n                status: action.payload\n            };\n        case IS_PROFILE_FETCHING:\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        case IS_STATUS_FETCHING:\n            return {\n                ...state,\n                isFetchingStatus: action.payload\n            };\n        case SET_PHOTO_SUCCESS:\n            return {\n                ...state,\n                profile: {...state.profile, photos: action.payload} as ProfileType\n                /* Refactoring later action type for this case */\n            };\n        default:\n            return state\n    }\n}\n\nexport const profileActions = {\n    addPostCreator: (value: string) => ({\n        type: ADD_POST,\n        payload: value\n    } as const),\n\n    deletePostCreator: (id: number) => ({\n        type: DELETE_POST,\n        payload: id\n    } as const),\n\n    setProfileData: (data: ProfileType) => ({\n        type: SET_PROFILE_DATA,\n        payload: data\n    } as const),\n\n    getStatus: (value: string) => ({\n        type: GET_STATUS,\n        payload: value\n    } as const),\n\n    setPhotoSuccess: (photos: PhotosType) => ({\n        type: SET_PHOTO_SUCCESS,\n        payload: photos\n    } as const),\n\n    toggleFetch: (bool: boolean) => ({\n        type: IS_PROFILE_FETCHING,\n        payload: bool\n    } as const),\n\n    toggleFetchStatus: (bool: boolean) => ({\n        type: IS_STATUS_FETCHING,\n        payload: bool\n    } as const)\n}\n\nexport default profileReducer\n","let initialState = {\n    friendList: [\n        {id: 1, name: 'Ivan'},\n        {id: 2, name: 'Dmitri'},\n        {id: 3, name: 'Max'},\n    ],\n}\n\nexport type SidebarInitialStateType = typeof initialState\n\nconst sidebarReducer = (state = initialState, action: any): SidebarInitialStateType => {\n\n    return state\n}\n\nexport default sidebarReducer","import {UserType} from \"../../store/types/@types\";\n\ntype UpdateObjectInArrayType = (\n    items: Array<UserType>,\n    itemID: number,\n    objPropsName: keyof UserType,\n    newObjProps: {\n        followed: boolean\n    }) => Array<UserType>\n\nexport const UpdateObjectInArray: UpdateObjectInArrayType = (\n    items,\n    itemID,\n    objPropsName,\n    newObjProps\n): Array<UserType> => items.map((user) => {\n\n    if (user[objPropsName] === itemID) {\n        return {\n            ...user, ...newObjProps\n        } as UserType\n    }\n    return user\n})\n","import {UpdateObjectInArray} from \"../../../utils/helpers/object-helpers\";\nimport {InferActionsType} from \"../../store\";\nimport {UserType} from \"../../types/@types\";\nimport {\n    FOLLOW,\n    IS_DISABLED_BTN,\n    IS_USER_FETCHING,\n    SET_PAGE,\n    SET_TOTAL_COUNT,\n    SET_USERS,\n    UNFOLLOW\n} from \"../../actions/actions\";\n\nconst initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalCount: 400,\n    currentPage: 1,\n    isLoading: false,\n    isDisabledBtn: [] as Array<number>, // Array of users id\n};\n\nexport type UserInitialStateType = typeof initialState\nexport type UserActionsTypes = InferActionsType<typeof usersActions>\n\nconst usersReducer = (state = initialState, action: UserActionsTypes): UserInitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: UpdateObjectInArray(state.users, action.payload, 'id', {followed: true})\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: UpdateObjectInArray(state.users, action.payload, 'id', {followed: false})\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.payload,\n            };\n        case SET_PAGE:\n            return {\n                ...state,\n                currentPage: action.payload,\n            };\n        case SET_TOTAL_COUNT:\n            return {\n                ...state,\n                totalCount: action.payload\n            };\n        case IS_USER_FETCHING:\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        case IS_DISABLED_BTN:\n            return {\n                ...state,\n                isDisabledBtn: action.payload\n                    ? [...state.isDisabledBtn, action.userId]\n                    /* метод filter вернет нам новый массив, в котором удалит тот id, который мы передали */\n                    : state.isDisabledBtn.filter(id => id !== action.userId)\n            };\n        default:\n            return state\n    }\n}\n\nexport const usersActions = {\n    follow: (userID: number) => ({\n        type: FOLLOW,\n        payload: userID\n    } as const),\n\n    unfollow: (userID: number) => ({\n        type: UNFOLLOW,\n        payload: userID\n    } as const),\n\n    setUsers: (users: Array<UserType>) => ({\n        type: SET_USERS,\n        payload: users\n    } as const),\n\n    setPage: (num: number) => ({\n        type: SET_PAGE,\n        payload: num\n    } as const),\n\n    setTotalCount: (num: number) => ({\n        type: SET_TOTAL_COUNT,\n        payload: num\n    } as const),\n\n    toggleFetch: (bool: boolean) => ({\n        type: IS_USER_FETCHING,\n        payload: bool\n    } as const),\n\n    toggleDisabledBtn: (bool: boolean, id: number) => ({\n        type: IS_DISABLED_BTN,\n        payload: bool,\n        userId: id,\n    } as const)\n}\n\nexport default usersReducer\n\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./reducers/profile/profileReducer\";\nimport dialogsReducer from \"./reducers/dialogs/dialogsReducer\";\nimport sidebarReducer from \"./reducers/sidebar/sidebarReducer\";\nimport usersReducer from \"./reducers/users/usersReducer\";\nimport authReducer from \"./reducers/auth/authReducer\";\nimport appReducer from \"./reducers/app/appReducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\n\n/* Передаем в store с помощью combineReducers все Reducer который объединит их в один */\nlet RootReducer = combineReducers({\n    app: appReducer,\n    profilePage: profileReducer,\n    dialogPage: dialogsReducer,\n    userPage: usersReducer,\n    sidebar: sidebarReducer,\n    auth: authReducer,\n    form: formReducer,\n})\n\ntype RootReducerType = typeof RootReducer;\n/* Создаем глобальный тип для state */\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(RootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nexport default store\n","import React from 'react'\nimport classesItem from \"./Users.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../store/types/@types\";\n\ntype PropsType = {\n    user: UserType\n    setUnfollowHandler: (id: number) => void\n    setFollowHandler : (id: number) => void\n    isDisabled: Array<number>\n}\n\nconst UsersItem: React.FC<PropsType> = ({user, setUnfollowHandler, setFollowHandler, isDisabled}) => {\n    return (\n        <div className={classesItem.userInfoWrapper}>\n            <div>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img className={classesItem.infoWrapperImg}\n                             src={user.photos.small || 'https://about.canva.com/wp-content/uploads/sites/3/2018/03/Purple-and-Pink-Cute-Man-Face-Laptop-Sticker.jpg'}\n                             alt=\"avatar\"/>\n                    </NavLink>\n                </div>\n                <div>\n                    {user.followed ?\n                        <button\n                            className={`${classesItem.unFollowBtn} ${classesItem.userSubscribeBtn}`}\n                            onClick={() => setUnfollowHandler(user.id)}\n                            /* метод some вернет на true если id находится в массиве */\n                            disabled={isDisabled.some(id => id === user.id)}\n                        >Unfollow</button>\n                        :\n                        <button\n                            className={`${classesItem.followBtn} ${classesItem.userSubscribeBtn}`}\n                            /* метод some вернет на true если id находится в массиве */\n                            onClick={() => setFollowHandler(user.id)}\n                            disabled={isDisabled.some(id => id === user.id)}\n                        >Follow</button>}\n                </div>\n            </div>\n            <div className={classesItem.userInfoContainer}>\n                <div>\n                        <span className={classesItem.info}>User name:\n                            <p>{(user.name || undefined) ? user.name : 'Not indicated'}</p>\n                        </span>\n                    <span className={classesItem.info}>User status:\n                            <p>{(user.status || undefined) ? user.status : 'Not indicated'}</p>\n                        </span>\n                </div>\n                <div>\n                        <span className={classesItem.location}>Country:\n                            <p>{(user.location || undefined) ? user.location.country : 'Not indicated'}</p>\n                        </span>\n                    <span className={classesItem.location}>City:\n                            <p>{(user.location || undefined) ? user.location.city : 'Not indicated'}</p>\n                        </span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default UsersItem\n","export default __webpack_public_path__ + \"static/media/35.64407753.svg\";","import React from 'react'\nimport classes from \"./spinner.module.css\";\nimport spinner from '../../../assets/icons/35.svg'\n\n\nexport const Preloader = () => {\n    return (\n        <div className={classes.userLoading}>\n            <div className={classes.spinner}>\n                <img src={spinner} alt=\"spinner\"/>\n            </div>\n        </div>\n    )\n}","import React, {FC} from \"react\";\nimport {useFormik} from \"formik\";\n\nconst SearchForm: FC = () => {\n    const form = useFormik({\n        initialValues: {\n            name: '',\n        },\n        onSubmit: values => {\n            console.log(JSON.stringify(values, null, 2))\n        },\n    });\n\n    return (\n        <form onSubmit={form.handleSubmit}>\n            <label htmlFor='name'/>\n            <input\n                id='name'\n                type='text'\n                name='name'\n                onChange={form.handleChange}\n                onBlur={form.handleBlur}\n                value={form.values.name}\n            />\n            {form.touched.name && form.errors.name ? <div>{form.errors.name}</div> : null}\n            <button type='submit'>Submit</button>\n        </form>\n    )\n}\n\nexport default SearchForm","import classes from \"../Users.module.css\";\nimport React, {FC} from 'react';\nimport ReactPaginate from \"react-paginate\";\n\nimport UsersItem from \"../UserItem/UserItem\";\nimport {Preloader} from \"../../common/preloader/spinner\";\nimport {UserType} from \"../../../store/types/@types\";\nimport SearchForm from \"./UserSearch\";\n// import Paginator from \"../../common/paginator/paginator\";\n\ntype PropsType = {\n    usersPage: Array<UserType>\n    totalCount: number\n    pageSize: number\n    currentPage: number\n    isLoading: boolean\n    isDisabled: Array<number>\n    selectPage: (num: number) => void\n    setFollowHandler: (id: number) => void\n    setUnfollowHandler: (id: number) => void\n}\n\nconst Users: FC<PropsType> = (\n    {\n        usersPage = [], totalCount, pageSize, currentPage, isLoading,\n        isDisabled, selectPage, setFollowHandler, setUnfollowHandler\n    }\n) => {\n\n    const pagesCount = Math.ceil(totalCount / pageSize)\n\n    let userItem = usersPage.map(uData => (\n            <UsersItem user={uData}\n                       setUnfollowHandler={(id: number) => setUnfollowHandler(id)}\n                       setFollowHandler={(id: number) => setFollowHandler(id)}\n                       isDisabled={isDisabled}\n                       key={uData.id}/>\n        )\n    )\n\n\n    return (\n        <div className={classes.usersContainer}>\n            <div className={classes.usersHeader}>\n                <h2>Users</h2>\n                <SearchForm/>\n            </div>\n            <div className={classes.usersField}>\n                <div className={classes.usersItems}>\n                    <ReactPaginate\n                        previousLabel={\"<\"}\n                        nextLabel={\">\"}\n                        breakLabel={'~'}\n                        pageCount={pagesCount}\n                        marginPagesDisplayed={1}\n                        pageRangeDisplayed={3}\n                        onPageChange={(e) => selectPage(e.selected + 1)}\n                        containerClassName={classes.reactPaginate}\n                        activeClassName={classes.reactPaginationBtn}\n                    />\n                    {isLoading ? <Preloader/> : <div>{userItem}</div>}\n                    {/*If we want use custom pagination, use template below*/}\n                    {/*<Paginator*/}\n                    {/*    totalItemsCount={totalCount}*/}\n                    {/*    pageSize={pageSize}*/}\n                    {/*    currentPage={currentPage}*/}\n                    {/*    isLoading={isLoading}*/}\n                    {/*    selectPage={selectPage}*/}\n                    {/*/>*/}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Users\n","import {CommonResponseType, UserType} from \"../store/types/@types\";\nimport {instance} from \"./instance-api\";\n\ntype GetUserAPIType = {\n    items: Array<UserType>,\n    totalCount: number,\n    error: null | string\n}\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance\n            .get<GetUserAPIType>(`/users?page=${currentPage}&count=${pageSize}`).then(res => res.data)\n    },\n    setFollow(id: number) {\n        return instance\n            .post<CommonResponseType>(`/follow/${id}`, null).then(res => res.data)\n    },\n    setUnfollow(id: number) {\n        return instance\n            .delete(`/follow/${id}`).then(res => res.data) as Promise<CommonResponseType>\n    }\n}\n","import {UserActionsTypes, usersActions} from \"../../reducers/users/usersReducer\";\nimport {Dispatch} from \"redux\";\nimport {usersAPI} from \"../../../api/user-api\";\nimport {ResultCodesEnum} from \"../../../api/instance-api\";\nimport {CommonResponseType, CommonThunkCreatorType} from \"../../types/@types\";\n\nexport const getUsersThunkCreator = (currentPage: number = 1, pageSize: number): CommonThunkCreatorType<UserActionsTypes> =>\n    async (dispatch) => {\n        dispatch(usersActions.toggleFetch(true))\n\n        let response = await usersAPI.getUsers(currentPage, pageSize)\n\n        dispatch(usersActions.setUsers(response.items))\n        dispatch(usersActions.setTotalCount(response.totalCount))\n        dispatch(usersActions.toggleFetch(false))\n    }\n\nexport const getPageThunkCreator = (num: number, pageSize: number): CommonThunkCreatorType<UserActionsTypes> =>\n    async (dispatch) => {\n        dispatch(usersActions.setPage(num))\n        dispatch(usersActions.toggleFetch(true))\n\n        let response = await usersAPI.getUsers(num, pageSize)\n\n        dispatch(usersActions.setUsers(response.items))\n        dispatch(usersActions.toggleFetch(false))\n    }\n\nconst _follow_unfollow_flow = async (\n    dispatch: Dispatch<UserActionsTypes>,\n    userId: number,\n    apiMethod: (userID: number) => Promise<CommonResponseType>,\n    actionCreator: (userId: number) => UserActionsTypes) => {\n\n    dispatch(usersActions.toggleDisabledBtn(true, userId))\n    const response = await apiMethod(userId)\n\n    if (response.resultCode === ResultCodesEnum.SUCCESS) {\n        dispatch(actionCreator(userId))\n        dispatch(usersActions.toggleDisabledBtn(false, userId))\n    } else {\n        console.log('Error AXIOS', response.messages)\n    }\n}\n\nexport const setFollowThunkCreator = (id: number): CommonThunkCreatorType<UserActionsTypes> =>\n    async (dispatch) => {\n        await _follow_unfollow_flow(dispatch, id, usersAPI.setFollow, usersActions.follow)\n    }\n\nexport const setUnfollowThunkCreator = (id: number): CommonThunkCreatorType<UserActionsTypes> =>\n    async (dispatch) => {\n        await _follow_unfollow_flow(dispatch, id, usersAPI.setUnfollow, usersActions.unfollow)\n    }\n","import {AppStateType} from \"../../store\";\n\nexport const getUsersSelector = (state: AppStateType) => {\n    return state.userPage.users\n}\n\nexport const getPageSizeSelector = (state: AppStateType) => {\n    return state.userPage.pageSize\n}\n\nexport const getUsersLengthSelector = (state: AppStateType) => {\n    return state.userPage.totalCount\n}\n\nexport const getCurrantPageSelector = (state: AppStateType) => {\n    return state.userPage.currentPage\n}\n\nexport const checkLoadingSelector = (state: AppStateType) => {\n    return state.userPage.isLoading\n}\n\nexport const isUnUseBtnSelector = (state: AppStateType) => {\n    return state.userPage.isDisabledBtn\n}\n\n/*\n * future, create this selector, he must work with all simple selectors\n * and into switch/case return all and new value from state (maybe useSelector)\n*/\n// export const componentSelector = createSelector(\n//     [],() => {\n//\n// })\n\n\n\n\n\n\n","import {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport React from \"react\";\n\nimport Users from \"./UsersLayout/Users\";\nimport {\n    getPageThunkCreator, getUsersThunkCreator,\n    setFollowThunkCreator, setUnfollowThunkCreator\n} from \"../../store/thunk/users/usersThunk\";\nimport {\n    checkLoadingSelector, getCurrantPageSelector, getPageSizeSelector,\n    getUsersLengthSelector, getUsersSelector, isUnUseBtnSelector\n} from \"../../store/selectors/users/usersSelectors\";\nimport {UserType} from \"../../store/types/@types\";\nimport {AppStateType} from \"../../store/store\";\n\ntype MapStateToPropsType = {\n    usersPage: Array<UserType>\n    totalCount: number\n    currentPage: number\n    pageSize: number\n    isLoading: boolean\n    isDisabledBtn: Array<number>\n}\ntype MapDispatchToPropsType = {\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\n    getPageThunkCreator: (num: number, pageSize: number) => void\n    setFollowThunkCreator: (id: number) => void\n    setUnfollowThunkCreator: (id: number) => void\n}\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\n\nclass UsersContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        this.props.getUsersThunkCreator(1, this.props.pageSize)\n    }\n\n    setFollowHandler = (id: number) => {\n        /* Мы перенесли всю логику в thunkCreator */\n        this.props.setFollowThunkCreator(id)\n    }\n    setUnfollowHandler = (id: number) => {\n        this.props.setUnfollowThunkCreator(id)\n    }\n    selectPage = (num: number) => {\n        const {pageSize} = this.props\n        this.props.getPageThunkCreator(num, pageSize)\n    }\n\n    render() {\n        return (\n            <Users\n                usersPage={this.props.usersPage}\n                totalCount={this.props.totalCount}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                isLoading={this.props.isLoading}\n                isDisabled={this.props.isDisabledBtn}\n\n                selectPage={(num) => this.selectPage(num)}\n                setFollowHandler={(id) => this.setFollowHandler(id)}\n                setUnfollowHandler={(id) => this.setUnfollowHandler(id)}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        usersPage: getUsersSelector(state),\n        pageSize: getPageSizeSelector(state),\n        totalCount: getUsersLengthSelector(state),\n        currentPage: getCurrantPageSelector(state),\n        isLoading: checkLoadingSelector(state),\n        isDisabledBtn: isUnUseBtnSelector(state),\n    }\n}\n\nexport default compose(\n    //TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState это типы для generic type\n    connect<MapStateToPropsType, MapDispatchToPropsType, any, AppStateType>(mapStateToProps, {\n        getUsersThunkCreator, getPageThunkCreator,\n        setFollowThunkCreator, setUnfollowThunkCreator\n    })\n)(UsersContainer)\n\n/* Вместо mapDispatchToProps мы передаем в connect объект action/thunk creators\n * чтобы сократить код до современного синтаксиса,\n * функция connect сама обернет dispatch в callback's\n *\n * // тоже самое :\n * const mapDispatchToProps = (dispatch) => {\n *     return {\n *         setFollow: (userID) => {\n *             dispatch(followAC(userID))\n *         },\n *         setUnfollow: (userID) => {\n *             dispatch(unfollowAC(userID))\n *         },\n *         setUsers: (users) => {\n *             dispatch(setUsersAC(users))\n *         },\n *         setPage: (num) => {\n *             dispatch(setPageAC(num))\n *         },\n *         setTotalCount: (num) => {\n *             dispatch(setTotalCountAC(num))\n *         },\n *         toggleFetch: (bool) => {\n *             dispatch(toggleFetchAC(bool))\n *         }\n *     }\n * }\n *\n * setFollowHandler = (id) => {\n *     //Мы перенесли всю логику в thunkCreator\n *     this.props.setFollowThunkCreator(id)\n *     this.props.toggleDisabledBtn(true, id)\n *     //Мы сделали инкапсуляцию axios метода в файл api\n *     usersAPI.setFollow(id).then(data => {\n *         if (data.resultCode === 0) {\n *             this.props.follow(id)\n *             console.log('Follow', data)\n *             this.props.toggleDisabledBtn(false, id)\n *         } else {\n *             console.log('Error AXIOS', data)\n *         }\n *     })\n * }\n */","export default __webpack_public_path__ + \"static/media/294.a1c83cdc.svg\";","import React from 'react'\nimport loading from '../../../assets/icons/294.svg'\n\n\nexport const Loader = () => {\n    return (\n        <div>\n            <img src={loading} width=\"100px\" alt=\"loading\"/>\n        </div>\n    )\n}","import React, {useState, useEffect, ChangeEvent} from 'react'\nimport classes from \"../ProfileInfo.module.css\";\nimport {Loader} from \"../../../common/preloader/loading\";\n\ntype PropsType = {\n    statusData: string\n    saveStatus: (val: string) => void\n    isOwner: boolean\n    loading: boolean\n}\n\nconst ProfileStatus: React.FC<PropsType> = ({statusData, saveStatus, isOwner, loading}) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(statusData)\n\n    const onEditMode = () => setEditMode(isOwner)\n    const offEditMode = () => setEditMode(false)\n\n    const addStatus = () => {\n        setEditMode(false)\n        saveStatus(status)\n    }\n\n    const updateTextStatus = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.target.value)\n\n    useEffect(() => {\n        setStatus(statusData)\n    }, [statusData])\n\n    return (\n        <div className={classes.statusBlock}>\n            {!editMode\n                ? <div className={classes.statusDescr} onClick={onEditMode}>\n                    {loading\n                        ? <Loader/>\n                        : <p>{statusData || 'Not indicated'}</p>\n                    }\n                </div>\n                :\n                <div className={classes.statusDescr}>\n                    <div>\n                        <input onChange={updateTextStatus} type='text' autoFocus={true} placeholder='Change status'\n                               value={status}/>\n                    </div>\n                    <br/>\n                    <div>\n                        {status.length > 100 ? <div>Status length must be less 100 letters</div> : null}\n                    </div>\n                    <div>\n                        <button type='submit'\n                                disabled={status.length > 100}\n                                className={classes.changeStatusBtn}\n                                onClick={addStatus}>Change\n                        </button>\n                        <button type='button' className={classes.cancelStatusBtn} onClick={offEditMode}>Cancel</button>\n                    </div>\n                </div>\n            }\n            <div className={classes.bubble2}/>\n            <div className={classes.bubble1}/>\n        </div>\n    )\n}\n\nexport default ProfileStatus","import React from 'react';\nimport classes from \"../ProfileInfo.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {ContactsType, ProfileType} from \"../../../../store/types/@types\";\n\ntype ProfileDataPropsType = {\n    profile: ProfileType | null\n    isOwner: boolean\n    contacts: ContactsType | null\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, contacts, isOwner}) => {\n\n    return (\n        <div className={classes.userInfoBlock}>\n            <div className={classes.aboutMe}>\n                <p className={classes.aboutMeTitle}>About me:</p>\n                <p>{profile ? profile.aboutMe : 'Not indicated'}</p>\n            </div>\n            <div className={classes.linkBlock}>\n                {contacts && Object.keys(contacts).map(key => {\n                    return <Contact key={key} title={key} value={contacts[key as keyof ContactsType]}/>\n                })}\n            </div>\n            {isOwner\n                ? <NavLink to={'/setting'}>\n                    <button className={classes.editInfoBtn}>Edit info</button>\n                </NavLink>\n                : null}\n        </div>\n    )\n}\n\ntype ContactsPropsType = {\n    title: string\n    value: string | null\n}\n\nconst Contact: React.FC<ContactsPropsType> = ({title, value}) => {\n    return value ? <a href={value} target='_blank' rel=\"noreferrer\">{title}</a> : null\n}\n\nexport default ProfileData","import React from \"react\";\nimport classes from \"../ProfileInfo.module.css\";\nimport {ProfileType} from \"../../../../store/types/@types\";\n\ntype PropsType = {\n    profile: ProfileType | null\n}\n\nconst ProfileJob: React.FC<PropsType> = ({profile}) => {\n    return (\n        <div className={classes.jobBlock}>\n            {profile && profile.lookingForAJob\n                ? <div className={classes.jobDescr}>\n                    <div>{profile.lookingForAJobDescription}</div>\n                </div>\n                : <div/>}\n            <div className={classes.openJobStatus}>\n                <p>Open for job<span>&nbsp;</span></p>\n                {profile && profile.lookingForAJob\n                    ? <div className={classes.circleIndicatorActive}/>\n                    : <div className={classes.circleIndicatorNot}/>}\n            </div>\n        </div>\n    );\n}\n\nexport default ProfileJob","import React, {ChangeEvent} from \"react\";\nimport classes from './ProfileInfo.module.css';\nimport {Preloader} from \"../../common/preloader/spinner\";\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport ProfileJob from \"./ProfileJob/ProfileJobData\";\nimport {ProfileType} from \"../../../store/types/@types\";\n\ntype PropsType = {\n    saveNewPhoto: (file: File) => void\n    profile: ProfileType | null\n    status: string\n    updateStatus: (val: string) => void\n    isOwner: boolean\n    isLoading: boolean\n    isFetchingStatus: boolean\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({saveNewPhoto, profile, status, updateStatus, isOwner, isLoading, isFetchingStatus}) => {\n\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            saveNewPhoto(e.target.files[0])\n        }\n    }\n\n    return (\n        <>\n            {!profile\n                ? <Preloader/>\n                :\n                <div>\n                    <div className={classes.head}>\n                    </div>\n                    <div className={classes.wrapper}>\n                        <div className={classes.mediaBlock}>\n                            <div className={classes.photosBlock}>\n                                {!profile.photos || isLoading\n                                    ? <Preloader/>\n                                    : <img\n                                        src={profile.photos.large || 'https://img2-placeit-net.s3-accelerate.amazonaws.com/uploads/stage/stage_image/40597/optimized_large_thumb_stage.jpg'}\n                                        alt=\"ava\"/>}\n                            </div>\n                            <ProfileStatus statusData={status} saveStatus={updateStatus}\n                                           isOwner={isOwner} loading={isFetchingStatus}/>\n                        </div>\n\n                        <div className={classes.infoBlock}>\n                            <div className={classes.nameBlock}>\n                                {isOwner\n                                    ? <label className={isLoading ? classes.changePhotosDis : classes.changePhotos}>\n                                        <input type={'file'} onChange={onPhotoSelected} disabled={isLoading}/>\n                                        Change Photos\n                                    </label>\n                                    : null}\n                                <h4 className={classes.user_nameBlock}>{profile && profile.fullName}</h4>\n                            </div>\n                            <ProfileData profile={profile} contacts={profile && profile.contacts} isOwner={isOwner}/>\n                            <ProfileJob profile={profile}/>\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default ProfileInfo\n\n//'https://img2-placeit-net.s3-accelerate.amazonaws.com/uploads/stage/stage_image/40597/optimized_large_thumb_stage.jpg'\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../../common/textarea/textarea\";\nimport {maxLength, minValue, required, ValidateTypes} from \"../../../../utils/validators/validator\";\n\nconst maxLength200: ValidateTypes = maxLength(200)\nconst minValue1: ValidateTypes = minValue(1)\n\ntype PostFormType = {\n    body: string\n}\n\nconst PostForm: React.FC<InjectedFormProps<PostFormType>> = (props) => {\n    const {handleSubmit, reset} = props;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       name='body'\n                       type='text'\n                       placeholder='Add new post'\n                       validate={[required, maxLength200, minValue1]}\n                />\n            </div>\n            <div>\n                <button onClick={() => setTimeout(reset, 0)}>Send message</button>\n            </div>\n        </form>\n    )\n}\n\nconst PostReduxForm = reduxForm<PostFormType>({\n    form: 'post',\n})(PostForm)\n\nexport default PostReduxForm","import classes from \"./Post.module.css\";\nimport React from \"react\";\n\ntype PropsType = {\n    message: string\n    likeCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n    return (\n        <div className={classes.item}>\n            <div className={classes.ava_wrapper}>\n                <img className={classes.ava_item}\n                    src='https://about.canva.com/wp-content/uploads/sites/3/2018/03/Purple-and-Pink-Cute-Man-Face-Laptop-Sticker.jpg'\n                    alt=\"avatar\"/>\n            </div>\n            <div className={classes.body_wrapper}>\n                <p className={classes.post_body_item}>{props.message}</p>\n            </div>\n            <div className={classes.like_wrapper}>\n                <div className={classes.like_item}>likes {props.likeCount}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React from \"react\";\nimport classes from '../Posts.module.css';\nimport PostReduxForm from \"../PostsForm/PostForm\";\nimport Post from \"../PostsItem/Post\";\nimport {PostsType} from \"../../../../store/types/@types\";\n\ntype PropsType = {\n    posts: Array<PostsType>\n    createPost: (val: string) => void\n}\n\n/* Мы используем memo, чтобы не происходило лишних отрисовок если пропсы не поменялись */\nconst Posts: React.FC<PropsType> = React.memo((props) => {\n    /* Мы используем reverse к копии массива постов, так как этот метод мутирующего типа */\n    const postsElement = [...props.posts].reverse().map(pData => <Post message={pData.message}\n                                                                       likeCount={pData.likeCount}\n                                                                       key={pData.id}/>)\n\n    const addPost = (value: { body:string }) => {\n        props.createPost(value.body)\n    }\n\n    return (\n        <div className={classes.postField}>\n            <h3>My posts</h3>\n            <div>\n                <PostReduxForm onSubmit={addPost}/>\n            </div>\n            <div className={classes.postsBlock}>\n                {postsElement}\n            </div>\n        </div>\n    );\n})\n\nexport default Posts","import Posts from \"./PostsLayout/Posts\";\nimport {connect} from \"react-redux\";\nimport {profileActions} from \"../../../store/reducers/profile/profileReducer\";\nimport {AppStateType} from \"../../../store/store\";\nimport React from \"react\";\nimport {PostsType} from \"../../../store/types/@types\";\n\nexport type MapStateToProps = {\n    posts: Array<PostsType>\n}\nexport type MapDispatchToProps = {\n    createPost: (val: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\n\nconst PostsContainer: React.FC = connect<MapStateToProps, MapDispatchToProps, any, AppStateType>(mapStateToProps, {\n    createPost: profileActions.addPostCreator\n})(Posts);\n\nexport default PostsContainer\n","import React from \"react\";\nimport ProfileInfo from \"../ProfileInfo/PtofileInfo\";\nimport classes from \"../Profile.module.css\"\nimport PostsContainer from \"../Posts/PostsContainer\";\nimport {ProfileType} from \"../../../store/types/@types\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (val: string) => void\n    isOwner: boolean\n    saveNewPhoto: (file: File) => void\n    isLoading: boolean\n    isFetchingStatus: boolean\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n    return (\n        <div className={classes.profileContainer}>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         isOwner={props.isOwner}\n                         saveNewPhoto={props.saveNewPhoto}\n                         isLoading={props.isLoading}\n                         isFetchingStatus={props.isFetchingStatus}\n            />\n            <PostsContainer/>\n        </div>\n\n    );\n}\n\nexport default Profile","import {PhotosType, ProfileType,} from \"../store/types/@types\";\nimport {instance} from \"./instance-api\";\nimport {CommonResponseType} from \"../store/types/@types\";\n\ntype PhotosResponseDataType = {\n    photos: PhotosType\n}\nexport const profileAPI = {\n    getProfile(id: number) {\n        return instance\n            .get<ProfileType>(`/profile/${id}`).then(res => res.data)\n    },\n    getStatusProfile(id: number) {\n        return instance\n            .get<string>(`/profile/status/${id}`).then(res => res.data)\n    },\n    setStatus(newStatus: string) {\n        return instance\n            .put<CommonResponseType>('/profile/status', {status: newStatus}).then(res => res.data)\n    },\n    savePhoto(file: File) {\n        let formData = new FormData()\n        formData.append('image', file)\n        return instance\n            .put<CommonResponseType<PhotosResponseDataType>>('/profile/photo', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }).then(res => res.data)\n    },\n    saveProfile(data: ProfileType) {\n        return instance\n            .put<CommonResponseType<ProfileType>>('/profile', data).then(res => res.data)\n    }\n}\n\n","import {profileActions, ProfileActionsTypes,} from \"../../reducers/profile/profileReducer\";\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {ProfileType, CommonThunkCreatorType} from \"../../types/@types\";\nimport {profileAPI} from \"../../../api/profile-api\";\nimport {ResultCodesEnum} from \"../../../api/instance-api\";\nimport {isNull} from \"util\";\n\nexport const getProfileThunkCreator = (id: number): CommonThunkCreatorType<ProfileActionsTypes> =>\n    async (dispatch) => {\n        dispatch(profileActions.toggleFetch(true))\n\n        let response = await profileAPI.getProfile(id)\n\n        dispatch(profileActions.setProfileData(response))\n        dispatch(profileActions.toggleFetch(false))\n    }\n\nexport const getStatusThunkCreator = (id: number): CommonThunkCreatorType<ProfileActionsTypes> =>\n    async (dispatch) => {\n        dispatch(profileActions.toggleFetchStatus(true))\n\n        let response = await profileAPI.getStatusProfile(id)\n\n        dispatch(profileActions.getStatus(response))\n        dispatch(profileActions.toggleFetchStatus(false))\n    }\n\nexport const setStatusThunkCreator = (status: string): CommonThunkCreatorType<ProfileActionsTypes> =>\n    async (dispatch) => {\n        try {\n            dispatch(profileActions.toggleFetchStatus(true))\n            let response = await profileAPI.setStatus(status)\n\n            if (response.resultCode === ResultCodesEnum.SUCCESS) {\n                dispatch(profileActions.getStatus(status))\n                dispatch(profileActions.toggleFetchStatus(false))\n            }\n        } catch (err) {\n            alert(err)\n        }\n    }\nexport const saveNewPhotoThunkCreator = (file: File): CommonThunkCreatorType<ProfileActionsTypes> =>\n    async (dispatch) => {\n        dispatch(profileActions.toggleFetch(true))\n        let response = await profileAPI.savePhoto(file)\n\n        if (response.resultCode === ResultCodesEnum.SUCCESS) {\n            dispatch(profileActions.setPhotoSuccess(response.data.photos))\n            dispatch(profileActions.toggleFetch(false))\n        }\n    }\n\nexport const saveProfileThunkCreator = (data: ProfileType): CommonThunkCreatorType<ProfileActionsTypes | FormAction> =>\n    async (dispatch, getState) => {\n        dispatch(profileActions.toggleFetch(true))\n\n        const userId = getState().auth.userId\n        let response = await profileAPI.saveProfile(data)\n\n        if (response.resultCode === ResultCodesEnum.SUCCESS) {\n\n            if (!isNull(userId)) {\n                await dispatch(getProfileThunkCreator(userId))\n            } else {\n                throw new Error('User ID can\\'t be null')\n            }\n\n            dispatch(profileActions.toggleFetch(false))\n        } else {\n            dispatch(profileActions.toggleFetch(false))\n            dispatch(stopSubmit('newProfileData', {_error: response.messages}))\n        }\n    }\n","import {AppStateType} from \"../../store\";\n\nexport const getProfileSelector = (state: AppStateType) => {\n    return state.profilePage.profile\n}\n\nexport const getStatusSelector = (state: AppStateType) => {\n    return state.profilePage.status\n}\n\nexport const getUserIdSelector = (state: AppStateType) => {\n    return state.auth.userId\n}\n\nexport const checkAuthSelector = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const checkLoadingSelector = (state: AppStateType) => {\n    return state.profilePage.isLoading\n}\n\nexport const checkFetchingStatusSelector = (state: AppStateType) => {\n    return state.profilePage.isFetchingStatus\n}\n\n/*\n* future, create this selector, he must work with all simple selectors\n* and into switch/case return all and new value from state\n */\n// export const componentSelector = createSelector(\n//     [],() => {\n//\n// })\n\n\n\n\n\n\n","import classes from \"./Profile.module.css\"\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nimport Profile from \"./ProfileLayout/Ptofile\";\nimport withAuthRedirect from \"../../utils/hoc/authRedirect\";\nimport {\n    getProfileThunkCreator, getStatusThunkCreator, saveNewPhotoThunkCreator,\n    setStatusThunkCreator\n} from \"../../store/thunk/profile/profileThunk\";\nimport {\n    checkAuthSelector, checkFetchingStatusSelector, checkLoadingSelector, getProfileSelector,\n    getStatusSelector, getUserIdSelector\n} from \"../../store/selectors/profile/profileSelectors\";\nimport {AppStateType} from \"../../store/store\";\n\ntype MapStateToProps = ReturnType<typeof mapStateToProps>\ntype MapDispatchToProps = {\n    getProfileThunkCreator: (id: number) => void\n    setStatusThunkCreator: (val: string) => void\n    getStatusThunkCreator: (id: number) => void\n    saveNewPhotoThunkCreator: (file: File) => void\n}\ntype PathParams = {\n    userId: string\n}\ntype PropsType = MapStateToProps & MapDispatchToProps & RouteComponentProps<PathParams>\n\nclass ProfileContainer extends React.PureComponent<PropsType> {\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authUserID\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getProfileThunkCreator(userId)\n            this.props.getStatusThunkCreator(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <div className={classes.profileContainer}>\n                <Profile {...this.props}\n                         isOwner={!this.props.match.params.userId}\n                         profile={this.props.profile}\n                         updateStatus={this.props.setStatusThunkCreator}\n                         saveNewPhoto={this.props.saveNewPhotoThunkCreator}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    profile: getProfileSelector(state),\n    status: getStatusSelector(state),\n    authUserID: getUserIdSelector(state),\n    isAuth: checkAuthSelector(state),\n    isLoading: checkLoadingSelector(state),\n    isFetchingStatus: checkFetchingStatusSelector(state)\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getProfileThunkCreator, setStatusThunkCreator,\n        getStatusThunkCreator, saveNewPhotoThunkCreator\n    }),\n    withAuthRedirect,\n    withRouter,\n)(ProfileContainer)","import React from 'react'\nimport {maxLength, minValue} from \"../../../utils/validators/validator\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/textarea/textarea\";\nimport {InputBase} from \"../../common/input/input\";\nimport {Preloader} from \"../../common/preloader/spinner\";\nimport classes from \"../Setting.module.css\";\nimport {ProfileType} from \"../../../store/types/@types\";\n\nconst maxLength300 = maxLength(300)\nconst maxLength50 = maxLength(50)\nconst maxLength20 = maxLength(20)\nconst minValue1 = minValue(1)\n\ntype ProfileFormType = {\n    initialValues: ProfileType\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileFormType> & ProfileFormType> = (props) => {\n\n    const {handleSubmit, submitting, error} = props\n    return (\n        <form onSubmit={handleSubmit} className={classes.settingsWrapper}>\n            <div className={classes.form_wrapper}>\n                <div className={classes.aboutMe_block}>\n                    <h4>About me:</h4>\n                    <Field component={Textarea}\n                           name='aboutMe'\n                           type='text'\n                           placeholder='Write about your'\n                           validate={[maxLength300, minValue1]}\n                    />\n                    <h4>Full Name</h4>\n                    <Field component={InputBase}\n                           name='fullName'\n                           type='text'\n                           placeholder='Full name'\n                           validate={[maxLength20, minValue1]}\n                    />\n                    <div className={classes.btn_save}>\n                        <button type=\"submit\"\n                                disabled={submitting}>Save\n                        </button>\n                    </div>\n                </div>\n                <div className={classes.job_block}>\n                    <h4>Job information:</h4>\n                    <Field component={Textarea}\n                           name='lookingForAJobDescription'\n                           type='text'\n                           placeholder='Description for job'\n                           validate={[maxLength50, minValue1]}\n                    />\n                    <span>Open for job&nbsp;</span>\n                    <Field component='input'\n                           name='lookingForAJob'\n                           type=\"checkbox\"/>\n                    <div className={classes.btn_save}>\n                        <button type=\"submit\"\n                                disabled={submitting}>Save\n                        </button>\n                    </div>\n                </div>\n                <div className={classes.contacts_block}>\n                    <h4>Contacts:</h4>\n                    <div className={classes.contacts_fields}>\n                        <p>Facebook:</p>\n                        <Field component={InputBase}\n                               name='contacts.facebook'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>Website:</p>\n                        <Field component={InputBase}\n                               name='contacts.website'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>VK:</p>\n                        <Field component={InputBase}\n                               name='contacts.vk'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>Twitter:</p>\n                        <Field component={InputBase}\n                               name='contacts.twitter'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>Instagram:</p>\n                        <Field component={InputBase}\n                               name='contacts.instagram'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>YouTube:</p>\n                        <Field component={InputBase}\n                               name='contacts.youtube'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>GitHub:</p>\n                        <Field component={InputBase}\n                               name='contacts.github'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                        <p>MainLink:</p>\n                        <Field component={InputBase}\n                               name='contacts.mainLink'\n                               type='text'\n                               placeholder='https://'\n                               validate={[maxLength50, minValue1]}\n                        />\n                    </div>\n                    <div className={classes.btn_save}>\n                        <button type=\"submit\"\n                                disabled={submitting}>Save\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className={classes.btn_saveAll}>\n                <button type=\"submit\"\n                        disabled={submitting}>Save All\n                </button>\n            </div>\n            {error ? <div>{error}</div> : null}\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileFormType>(\n    {\n        form: 'newProfileData',\n    }\n)(ProfileDataForm)\n\ntype PropsType = {\n    saveProfile: (data: ProfileType) => void\n    profile: ProfileType | null\n    isLoading: boolean\n    initialValues: ProfileType\n}\n\nconst ProfileDataEdit:React.FC<PropsType> = ({saveProfile, profile, isLoading, initialValues}) => {\n    /*\n    * Для полей contacts мы в качестве названия используем 'contacts.Name'\n    * Чтобы внутри formData, создался объект contacts. И value для этих полей отображался\n    */\n    const onSubmit = (formData: ProfileType) => {\n        saveProfile(formData)\n    }\n\n\n    return (\n        <>\n            {isLoading\n                ? <div className={classes.isLoading}>\n                    <Preloader/>\n                </div>\n                : null}\n            <div className={(!isLoading) ? classes.settingsField : classes.settingsFieldDis}>\n                <ProfileDataReduxForm\n                    onSubmit={onSubmit}\n                    initialValues={initialValues}\n                />\n\n            </div>\n        </>\n    )\n}\n\nexport default ProfileDataEdit","import React from \"react\";\nimport classes from \"./Setting.module.css\"\nimport ProfileDataEdit from \"./ProfileEdit/InfoBlockForm\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {saveProfileThunkCreator} from \"../../store/thunk/profile/profileThunk\";\nimport {checkLoadingSelector, getProfileSelector} from \"../../store/selectors/profile/profileSelectors\";\nimport {AppStateType} from \"../../store/store\";\nimport {ProfileType} from \"../../store/types/@types\";\nimport withAuthRedirect from \"../../utils/hoc/authRedirect\";\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n    isLoading: boolean\n}\ntype MapDispatchToPropsType = {\n    saveProfileThunkCreator: (data: ProfileType) => void\n}\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst Setting: React.FC<PropsType> = ({profile, isLoading,...props}) => {\n\n    const saveProfile = (data: ProfileType) => {\n        props.saveProfileThunkCreator(data)\n    }\n\n    return (\n        <div className={classes.settingContainer}>\n            <h2>Setting</h2>\n            <ProfileDataEdit\n                profile={profile}\n                initialValues={profile as ProfileType}\n                isLoading={isLoading}\n                saveProfile={saveProfile}\n            />\n        </div>\n    )\n};\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: getProfileSelector(state),\n    isLoading: checkLoadingSelector(state),\n})\n\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, any, AppStateType>(mapStateToProps, {saveProfileThunkCreator}),\n    withAuthRedirect,\n)(Setting)\n","export default __webpack_public_path__ + \"static/media/logo.30954a56.svg\";","import React from \"react\";\nimport classes from '../Header.module.css';\nimport logo from \"../../../assets/logo/logo.svg\"\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    login: string | null\n    isAuth: boolean\n    signOut: () => void\n}\n\nconst Header: React.FC<PropsType> = ({isAuth, login,signOut}) => {\n    return (\n        <div className={classes.headerWrapper}>\n            <header className={classes.mediaBlock}>\n                <img src={logo} alt=\"logo\"/>\n                <h2>Social App</h2>\n            </header>\n            <div className={classes.loginBlock}>\n                <NavLink to={'/profile'}>\n                    {isAuth ? <div className={classes.userName}>{login}</div> : null}\n                </NavLink>\n                {isAuth\n                    ? <button className={classes.authBtn} onClick={signOut}>LOGOUT</button>\n                    : <NavLink to={'/login'}>\n                        <button className={classes.authBtn}>LOGIN</button>\n                    </NavLink>\n                }\n            </div>\n        </div>\n    )\n}\nexport default Header","import React from \"react\";\nimport Header from \"./HeaderLayout/Header\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {signOutThunkCreator} from \"../../store/thunk/auth/authThunk\";\nimport {AppStateType} from \"../../store/store\";\n\nexport type MapStateToProps = {\n    login: string | null\n    isAuth: boolean\n}\nexport type MapDispatchToProps = {\n    signOutThunkCreator: () => void\n}\n\ntype PropsType = MapStateToProps & MapDispatchToProps\n\nconst HeaderContainer:React.FC<PropsType> = (props) => {\n    return (\n        <Header login={props.login} isAuth={props.isAuth} signOut={props.signOutThunkCreator} />\n    )\n}\n\n/* Функция которая из state передает props внутрь компоненты */\nconst mapStateToProps = (state: AppStateType) => ({\n    login: state.auth.login,\n    isAuth: state.auth.isAuth,\n})\n\nexport default compose(\n    connect<MapStateToProps, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {signOutThunkCreator})\n)(HeaderContainer)\n","import React from \"react\";\nimport classes from '../Sidebar.module.css';\n\ntype PropsType = {\n    name: string\n}\n\nconst SidebarFriends: React.FC<PropsType> = ({name}) => {\n    return (\n        <div className={classes.item}>\n            <img\n                src='https://about.canva.com/wp-content/uploads/sites/3/2018/03/Purple-and-Pink-Cute-Man-Face-Laptop-Sticker.jpg'\n                alt=\"avatar\" />\n            <p>{name}</p>\n        </div>\n    )\n}\n\nexport default SidebarFriends\n","import React from \"react\";\nimport classes from '../Sidebar.module.css';\nimport SidebarFriends from \"../SidebarItem/sidebarFriends\";\n\ntype FriendListType = {\n    id: number\n    name: string\n}\ntype PropsType = {\n    sidebar: {\n        friendList: Array<FriendListType>\n    }\n}\n\nconst Sidebar: React.FC<PropsType> = ({sidebar}) => {\n    const friendItem = sidebar.friendList.map(uData => <SidebarFriends name={uData.name} key={uData.id}/>)\n\n    return (\n        <div className={classes.container}>\n            {friendItem}\n        </div>\n    )\n}\n\nexport default Sidebar\n","import Sidebar from \"./SidebarLayout/Sidebar\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\nimport {SidebarInitialStateType} from \"../../store/reducers/sidebar/sidebarReducer\";\n\ntype MapStateToPropsType = {\n    sidebar: SidebarInitialStateType\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        sidebar: state.sidebar\n    }\n}\n\nconst SidebarContainer = connect<MapStateToPropsType, any, any, AppStateType>(mapStateToProps)(Sidebar)\n\nexport default SidebarContainer\n","import React from \"react\";\nimport classes from './NavBar.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport SidebarContainer from \"../Sidebar/SidebarContainer\";\n\n\nconst NavBar = () => {\n    return (\n        <nav className={classes.nav}>\n            <div className={classes.item}>\n                <NavLink to='/profile'>Profile</NavLink>\n            </div>\n            <div className={classes.item}>\n                <NavLink to='/dialogs'>Messages</NavLink>\n            </div>\n            <div className={classes.item}>\n                <NavLink to='/users'>Users</NavLink>\n            </div>\n            <div className={classes.item}>\n                <NavLink to='/news'>News</NavLink>\n            </div>\n            <div className={classes.item}>\n                <NavLink to='/music'>Music</NavLink>\n            </div>\n            <div className={classes.item}>\n                <NavLink to='/setting'>Setting</NavLink>\n            </div>\n            <SidebarContainer/>\n        </nav>\n    )\n}\nexport default NavBar\n","import React from \"react\";\nimport classes from './StartPage.module.css'\n\nconst StartPage: React.FC = () => {\n    return (\n        <div className={classes.wrapper}>\n            <div className={classes.header}>\n                <h2 className={classes.headerGreeting}>Thank you for visiting.</h2>\n                <h4 className={classes.headerLogin}>Login : <span>free@samuraijs.com</span></h4>\n                <h4 className={classes.headerPass}>Password : <span>free</span></h4>\n            </div>\n            <div className={classes.disclaimer}>\n                <h3 className={classes.disclaimerTitle}>DISCLAIMER</h3>\n                <p className={classes.disclaimerDescr}>\n                    <b>In Safari now not working authorized use other browser, sorry.</b><br/>\n                    This is my template for SPA (Single Page Application). He has not complete functionality,\n                    but give you opportunity to see how at work. On this application i use GitHub Pages.\n                    For correct reloading page i use HashRouter. In order not to download full application i\n                    use Lazy Loading (React.Suspense, React.Lazy). This application support ReduxDevTools,\n                    you can see state and all dispatch working process.\n                </p>\n            </div>\n            <div className={classes.stack}>\n                <ul className={classes.stackList}>\n                    <h3 className={classes.stackTitile}>Stack technology:</h3>\n                    <li className={classes.stackItemTitle}>\n                        <h4>UI/UX (User interface)</h4>\n                    </li>\n                    <ul>\n                        <li className={classes.stackItem}>\n                            React (Class component and Function component, Life cycle methods, Hooks, HOC)\n                        </li>\n                        <li className={classes.stackItem}>\n                            CSS (CSS modules)\n                        </li>\n                    </ul>\n                    <li className={classes.stackItemTitle}>\n                        <h4>BLL (Business logic layer)</h4>\n                    </li>\n                    <ul>\n                        <li className={classes.stackItem}>Redux-Thunk (In future Redux-Saga)</li>\n                        <li className={classes.stackItem}>Redux-Form (Custom Fields)</li>\n                    </ul>\n                    <li className={classes.stackItemTitle}>\n                        <h4>DAL (Data access layer)</h4>\n                    </li>\n                    <ul>\n                        <li className={classes.stackItem}>Rest API :&nbsp;\n                            <a href=\"https://social-network.samuraijs.com/docs#\">\n                                https://social-network.samuraijs.com/docs#</a>\n                        </li>\n                        <li className={classes.stackItem}>AXIOS (Promise and Async/Await)</li>\n                    </ul>\n                    <li className={classes.stackItemTitle}>\n                        <h4>Testing</h4>\n                    </li>\n                    <ul>\n                        <li className={classes.stackItem}>\n                            Jestjs.io\n                        </li>\n                    </ul>\n                </ul>\n                <div className={classes.opportunities}>\n                    <ul className={classes.opportunitiesList}>\n                        <h4 className={classes.opportunitiesTitle}>You can</h4>\n                        <li className={classes.opportunitiesItemCan}>\n                            Login / Logout - if you not authorized you can't visited Profile Page and Messages Page.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Change you avatar image - for faster work use small weight file.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Change you status - on page other user in function blocked.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Change information for you profile - redirect on settings page (without styles).\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Add information if you open for job (without styles).\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Write new post - without server, only local.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Write new messages - without server, only local.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Looking other user - all users is live person.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            Enter on other user page.\n                        </li>\n                        <li className={classes.opportunitiesItemCan}>\n                            You can follow/unfollow users.\n                        </li>\n                    </ul>\n                    <ul className={classes.opportunitiesList}>\n                        <h4 className={classes.opportunitiesTitle}>You can't</h4>\n                        <li className={classes.opportunitiesItem}>\n                            Registration in application.\n                        </li>\n                        <li className={classes.opportunitiesItem}>\n                            Change password.\n                        </li>\n                        <li className={classes.opportunitiesItem}>\n                            Change information on not owner page.\n                        </li>\n                        <li className={classes.opportunitiesItem}>\n                            Look all following user.\n                        </li>\n                        <li className={classes.opportunitiesItem}>\n                            Search user.\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default StartPage\n","import React, {Suspense} from 'react'\nimport {Preloader} from \"../../components/common/preloader/spinner\";\n\nexport default function withSuspense<WCP>(Component: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return (\n            <Suspense fallback={<Preloader/>}>\n                <Component {...props}/>\n            </Suspense>\n        )\n    }\n}","import './App.css';\nimport React from 'react';\nimport {\n    HashRouter,\n    Route,\n    withRouter\n} from \"react-router-dom\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\n\nimport {InitializeApp} from \"./store/thunk/app/initThunk\";\nimport store, {AppStateType} from \"./store/store\";\n\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/PtofileContainer\";\nimport Setting from \"./components/Setting/Setting\";\nimport {Preloader} from \"./components/common/preloader/spinner\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport StartPage from \"./components/Start Component/StartPage\";\nimport {Switch} from \"react-router\";\nimport withSuspense from \"./utils/hoc/lazyComponent\";\n\n/* Add lazy loading for not base component */\nconst Login = React.lazy(() => import('./components/Login/Login'));\nconst DialogContainer = React.lazy(() => import('./components/Dialogs/DialogContainer'));\nconst SuspenseMessagesPage = withSuspense(DialogContainer);\nconst News = React.lazy(() => import('./components/News/News'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\n\ntype PropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = {\n    InitializeApp: () => void\n}\n\nclass App extends React.Component<PropsType & MapDispatchToPropsType> {\n    catchAllUnhandledError: () => void = () => {\n        alert('Some error occurred')\n    }\n\n    componentDidMount() {\n        this.props.InitializeApp()\n        window.addEventListener('Unhandled rejection', this.catchAllUnhandledError)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('Unhandled rejection', this.catchAllUnhandledError)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <NavBar/>\n                <div className='app-wrapper-content'>\n                    <Switch>\n                        <Route\n                            /*\n                            * Указываем не обязательный параметр :userId?\n                            * чтобы если не '/profile', передать в state данные о uri строке\n                            */\n                            path='/profile/:userId?'\n                            render={() => <ProfileContainer/>}/>\n                        <Route path='/users'\n                               render={() => <UsersContainer/>}/>\n                        <Route path='/login'\n                               render={withSuspense(Login)}/>\n                        <Route path='/dialogs'\n                               render={() => <SuspenseMessagesPage/>}/>\n                        <Route path='/news'\n                               render={withSuspense(News)}/>\n                        <Route path='/music'\n                               render={withSuspense(Music)}/>\n                        <Route path='/setting'\n                               render={withSuspense(Setting)}/>\n                        <Route exact path='/'\n                               render={() => <StartPage/>}/>\n                        <Route path='*'\n                               render={() => <div>404 Not Founded</div>}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\n/*  Делаем контейнерную компоненту для App, чтобы можно было протестировать ее отрисовку через test */\nconst SocialAppContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {InitializeApp}),\n    withRouter\n)(App);\n\nconst SocialApp: React.FC = () => {\n    return (\n        /* Use HashRouter for gh-pages */\n        <HashRouter>\n            <Provider store={store}>\n                <SocialAppContainer/>\n            </Provider>\n        </HashRouter>\n    )\n}\n\nexport default SocialApp","import {checkAuthThunkCreator} from \"../auth/authThunk\";\nimport {appActions, InitActionsTypes} from \"../../reducers/app/appReducer\";\nimport {CommonThunkCreatorType} from \"../../types/@types\";\n\nexport const InitializeApp = (): CommonThunkCreatorType<InitActionsTypes> => async (dispatch) => {\n    let promiseAuth = dispatch(checkAuthThunkCreator())\n\n    Promise.all([promiseAuth])\n        .then(() => {\n            dispatch(appActions.InitializeSuccess())\n        })\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nimport SocialApp from \"./App\";\n\nReactDOM.render(\n    <SocialApp/>,\n    document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React from 'react'\nimport classes from './input.module.css'\n\n// export const InputLight = ({input, meta: {touched, error}, ...props}) => {\n//     return (\n//         <div>\n//             <div>\n//                 <input {...input} {...props}/>\n//             </div>\n//             {touched &&\n//             ((error && <div className={classes.error_msg_light}>{error}</div>))}\n//         </div>\n//\n//     )\n// }\n\ntype ComponentProps = {\n    input: JSX.Element\n    meta: {\n        touched: boolean\n        error: string\n    }\n    props: React.ReactNode\n}\n\ntype InputCreateType = (params: ComponentProps) => void\n\nexport const InputBase: InputCreateType = ({input, meta: {touched, error}, ...props}) => {\n    return (\n        <div>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {touched &&\n            ((error && <div className={classes.error_msg}>{error}</div>))}\n        </div>\n\n    )\n}\n\nexport const LoginInput: InputCreateType = ({input, meta: {touched, error}}) => {\n    return (\n        <div>\n            <div>\n                <input {...input} type='text' placeholder='Login'\n                       className={(touched && error) ? classes.error_input : ''}/>\n            </div>\n            {touched && error && <span className={classes.error_msg}>{error}</span>}\n        </div>\n\n    )\n}\n\nexport const PasswordInput: InputCreateType = ({input, meta: {touched, error}}) => {\n    return (\n        <div>\n            <div>\n                <input {...input} type='password' placeholder='Password'\n                       className={(touched && error) ? classes.error_input : ''}/>\n            </div>\n            {touched && error && <span className={classes.error_msg}>{error}</span>}\n        </div>\n\n    )\n}\n","export type ValidateTypes = (value: string) => string | undefined\n\nexport const required: ValidateTypes = (value) => (value ? undefined : 'Required')\n\nexport const maxLength = (max: number): ValidateTypes => (value) =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\n\nexport const minLength = (min: number): ValidateTypes => (value) =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\n\nexport const minValue = (min: number): ValidateTypes => (value) =>\n    value && value.length < min ? `Must be at least ${min}` : undefined\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CDI8g\",\"ava_wrapper\":\"Post_ava_wrapper__2wRuV\",\"ava_item\":\"Post_ava_item__1V1Sk\",\"body_wrapper\":\"Post_body_wrapper__2qi5o\",\"post_body_item\":\"Post_post_body_item__3AFMu\",\"like_wrapper\":\"Post_like_wrapper__3OBgG\",\"like_item\":\"Post_like_item__1bLVO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1FWUI\",\"item\":\"NavBar_item__2RAQQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersContainer\":\"Users_usersContainer__1OedU\",\"usersHeader\":\"Users_usersHeader__1Ohv0\",\"usersField\":\"Users_usersField__13PIe\",\"usersItems\":\"Users_usersItems__3D9Hj\",\"reactPaginate\":\"Users_reactPaginate__2Tm98\",\"reactPaginationBtn\":\"Users_reactPaginationBtn__3fV12\",\"pagination\":\"Users_pagination__2Njh9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__1oKyh\",\"mediaBlock\":\"Header_mediaBlock__3QNG4\",\"loginBlock\":\"Header_loginBlock__6mma5\",\"userName\":\"Header_userName__2h_yj\",\"authBtn\":\"Header_authBtn__1ELyC\"};","import {GET_CAPTCHA, SET_AUTH_DATA} from \"../../actions/actions\";\nimport {InferActionsType} from \"../../store\";\n\nconst initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    isLoading: false,\n    captcha: null as string | null\n};\n\nexport type AuthInitialStateType = typeof initialState;\nexport type AuthActionsTypes = InferActionsType<typeof authActions>\n\n/* Need add typification for action */\nconst authReducer = (state = initialState, action: AuthActionsTypes): AuthInitialStateType => {\n    switch (action.type) {\n        case SET_AUTH_DATA:\n            return {\n                ...state,\n                ...action.payload,\n                isAuth: !state.isAuth\n            };\n        case GET_CAPTCHA:\n            return {\n                ...state,\n                captcha: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const authActions = {\n    setAuthData: (userId: number | null, email: string | null, login: string | null) => ({\n        type: SET_AUTH_DATA,\n        payload: {userId, email, login}\n    } as const),\n\n    getCaptcha: (url: string) => ({\n        type: GET_CAPTCHA,\n        payload: url\n    } as const)\n\n}\n\nexport default authReducer\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartPage_wrapper__3FcH6\",\"header\":\"StartPage_header__16P69\",\"headerGreeting\":\"StartPage_headerGreeting__2DjNg\",\"disclaimer\":\"StartPage_disclaimer__1s4bg\",\"disclaimerTitle\":\"StartPage_disclaimerTitle__3-W9w\",\"disclaimerDescr\":\"StartPage_disclaimerDescr__3Z-Un\",\"stack\":\"StartPage_stack__Qhez8\",\"stackTitile\":\"StartPage_stackTitile__293Iu\",\"stackList\":\"StartPage_stackList__yX5qs\",\"stackItemTitle\":\"StartPage_stackItemTitle__3EH7n\",\"stackItem\":\"StartPage_stackItem__eT94q\",\"opportunities\":\"StartPage_opportunities__prS0J\",\"opportunitiesTitle\":\"StartPage_opportunitiesTitle__tUoYd\",\"opportunitiesList\":\"StartPage_opportunitiesList__26NOM\",\"opportunitiesItem\":\"StartPage_opportunitiesItem__1dpRX\",\"opportunitiesItemCan\":\"StartPage_opportunitiesItemCan__1IuHy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_input\":\"input_error_input__27_o3\",\"error_msg_light\":\"input_error_msg_light__DlyGg\",\"error_msg\":\"input_error_msg__11WSO\"};","import React from 'react'\n\ntype ComponentProps = {\n    input: JSX.Element\n    meta: {\n        touched: boolean\n        error: string\n    }\n    props: React.ReactNode\n}\ntype TextAreaCreateType = (params: ComponentProps) => void\n\nexport const Textarea:TextAreaCreateType = ({input, meta: {touched, error}, ...props}) => {\n    return (\n        <div>\n            <div>\n                <textarea {...input} {...props} />\n            </div>\n            {touched &&\n            ((error && <span style={{color: 'crimson'}}>{error}</span>))}\n        </div>\n\n    )\n}\n","//DIALOG_ACTIONS\nexport const SEND_MESSAGE = 'my-app/dialogs/SEND_MESSAGE';\n//USER_ACTIONS\nexport const FOLLOW = 'my-app/users/FOLLOW'\nexport const UNFOLLOW = 'my-app/users/UNFOLLOW'\nexport const SET_USERS = 'my-app/users/SET_USERS'\nexport const SET_PAGE = 'my-app/users/SET_PAGE'\nexport const SET_TOTAL_COUNT = 'my-app/users/SET_TOTAL_COUNT'\nexport const IS_USER_FETCHING = 'my-app/users/IS_FETCHING'\nexport const IS_DISABLED_BTN = 'my-app/users/IS_DISABLED_BTN'\n//PROFILE_ACTIONS\nexport const ADD_POST = 'my-app/profile/ADD_POST';\nexport const DELETE_POST = 'my-app/profile/DELETE_POST';\nexport const SET_PROFILE_DATA = 'my-app/profile/SET_PROFILE_DATA';\nexport const GET_STATUS = 'my-app/profile/GET_STATUS';\nexport const SET_PHOTO_SUCCESS = 'my-app/profile/SET_PHOTO_SUCCESS';\nexport const IS_PROFILE_FETCHING = 'my-app/profile/IS_FETCHING';\nexport const IS_STATUS_FETCHING = 'my-app/profile/IS_FETCHING_STATUS';\n//AUTH_ACTIONS\nexport const SET_AUTH_DATA = 'my-app/auth/SET_AUTH_DATA';\nexport const GET_CAPTCHA = 'my-app/auth/GET_CAPTCHA';\n//INIT APP\nexport const SET_INITIALIZED = 'my-app/init/SET_INITIALIZED';\n","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\n\nconst mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n})\n\ntype MapStateToProps = {\n    isAuth: boolean\n}\n\nexport default function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\n\n    function RedirectComponent(props: MapStateToProps) {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to='/login'/>;\n\n        return <Component {...restProps as unknown as WCP}/>\n    }\n\n    //Мы оборачиваем connect функцией нашу классовую компоненту, чтобы в пропсах получить isAuth\n    const ConnectAuthRedirectComponent = connect<MapStateToProps, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\n\n    return ConnectAuthRedirectComponent\n}","import {instance, ResultCodeForCaptchaCEnum, ResultCodesEnum} from \"./instance-api\";\nimport {CommonResponseType} from \"../store/types/@types\";\n\ntype MeResponseDataType = {\n    id: number,\n    email: string,\n    login: string,\n}\ntype SignupResponseDataType = {\n    userId: number,\n}\ntype CaptchaAPIType = {\n    url: string\n}\n\nexport const authAPI = {\n    checkAuth() {\n        return instance\n            .get<CommonResponseType<MeResponseDataType>>('/auth/me').then(res => res.data)\n    },\n    signOut() {\n        return instance\n            .delete<CommonResponseType>('/auth/login').then(res => res.data)\n    },\n    signIn(email: string, password: string, rememberMe = false, captcha = false) {\n        return instance\n            .post<CommonResponseType<SignupResponseDataType, ResultCodesEnum | ResultCodeForCaptchaCEnum>>('/auth/login',\n                {email, password, rememberMe, captcha}).then(res => res.data)\n    },\n    getCaptcha() {\n        return instance\n            .get<CaptchaAPIType>('/security/get-captcha-url').then(res => res.data)\n    }\n}\n","import {authActions, AuthActionsTypes} from \"../../reducers/auth/authReducer\";\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {authAPI} from \"../../../api/auth-api\";\nimport {ResultCodeForCaptchaCEnum, ResultCodesEnum} from \"../../../api/instance-api\";\nimport {CommonThunkCreatorType} from \"../../types/@types\";\n\nexport const checkAuthThunkCreator = (): CommonThunkCreatorType<AuthActionsTypes> =>\n    async (dispatch) => {\n    let response = await authAPI.checkAuth()\n\n    if (response.resultCode === ResultCodesEnum.SUCCESS) {\n        let {id, login, email} = response.data\n        dispatch(authActions.setAuthData(id, email, login))\n    }\n}\nexport const signOutThunkCreator = (): CommonThunkCreatorType<AuthActionsTypes> =>\n    async (dispatch) => {\n    let response = await authAPI.signOut()\n\n    if (response.resultCode === ResultCodesEnum.SUCCESS) {\n        dispatch(authActions.setAuthData(null, null, null))\n    }\n}\n\nexport const signInThunkCreator = (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: boolean\n): CommonThunkCreatorType<AuthActionsTypes | FormAction> =>\n    async (dispatch) => {\n    let response = await authAPI.signIn(email, password, rememberMe, captcha)\n\n    if (response.resultCode === ResultCodesEnum.SUCCESS) {\n        await dispatch(checkAuthThunkCreator())\n    } else if (response.resultCode === ResultCodeForCaptchaCEnum.ANTI_BOT) {\n        let data = await authAPI.getCaptcha()\n        dispatch(authActions.getCaptcha(data.url))\n    } else {\n        dispatch(stopSubmit('login', {_error: response.messages}))\n    }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__3lONb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Sidebar_container__3CgDZ\",\"item\":\"Sidebar_item__3zPF1\"};"],"sourceRoot":""}